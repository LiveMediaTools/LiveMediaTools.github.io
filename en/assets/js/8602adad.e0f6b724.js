"use strict";(self.webpackChunkyourcmds_docs=self.webpackChunkyourcmds_docs||[]).push([[203],{5680:(e,t,a)=>{a.d(t,{xA:()=>c,yg:()=>u});var r=a(6540);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},l=Object.keys(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var s=r.createContext({}),p=function(e){var t=r.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},c=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},m="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,l=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),m=p(a),g=n,u=m["".concat(s,".").concat(g)]||m[g]||f[g]||l;return a?r.createElement(u,i(i({ref:t},c),{},{components:a})):r.createElement(u,i({ref:t},c))}));function u(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=a.length,i=new Array(l);i[0]=g;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[m]="string"==typeof e?e:n,i[1]=o;for(var p=2;p<l;p++)i[p]=a[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,a)}g.displayName="MDXCreateElement"},2732:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>h,contentTitle:()=>d,default:()=>w,frontMatter:()=>u,metadata:()=>y,toc:()=>v});var r=a(5680),n=Object.defineProperty,l=Object.defineProperties,i=Object.getOwnPropertyDescriptors,o=Object.getOwnPropertySymbols,s=Object.prototype.hasOwnProperty,p=Object.prototype.propertyIsEnumerable,c=(e,t,a)=>t in e?n(e,t,{enumerable:!0,configurable:!0,writable:!0,value:a}):e[t]=a,m=(e,t)=>{for(var a in t||(t={}))s.call(t,a)&&c(e,a,t[a]);if(o)for(var a of o(t))p.call(t,a)&&c(e,a,t[a]);return e},f=(e,t)=>l(e,i(t)),g=(e,t)=>{var a={};for(var r in e)s.call(e,r)&&t.indexOf(r)<0&&(a[r]=e[r]);if(null!=e&&o)for(var r of o(e))t.indexOf(r)<0&&p.call(e,r)&&(a[r]=e[r]);return a};const u={},d="FFmpeg",y={unversionedId:"ffmpeg/ffmpeg/README",id:"ffmpeg/ffmpeg/README",title:"FFmpeg",description:"1\u3001Transfer RTMP Streams",source:"@site/docs/ffmpeg/ffmpeg/README.md",sourceDirName:"ffmpeg/ffmpeg",slug:"/ffmpeg/ffmpeg/",permalink:"/en/ffmpeg/ffmpeg/",draft:!1,editUrl:"https://github.com/LiveMediaTools/LiveMediaTools.github.io/edit/main/docs/ffmpeg/ffmpeg/README.md",tags:[],version:"current",lastUpdatedAt:1728776482,formattedLastUpdatedAt:"Oct 12, 2024",frontMatter:{},sidebar:"ffmpeg",previous:{title:"Introduction",permalink:"/en/ffmpeg/"},next:{title:"FFprobe",permalink:"/en/ffmpeg/ffprobe/"}},h={},v=[{value:"1\u3001Transfer RTMP Streams",id:"1transfer-rtmp-streams",level:2},{value:"1.1\u3001Transfer FLV file",id:"11transfer-flv-file",level:3},{value:"Parameter Explanation",id:"parameter-explanation",level:4},{value:"1.2\u3001Transfer RTMP stream",id:"12transfer-rtmp-stream",level:3},{value:"2\u3001Record RTMP stream",id:"2record-rtmp-stream",level:2},{value:"3\u3001Transfer RTSP stream",id:"3transfer-rtsp-stream",level:2},{value:"3.1\u3001Transfer over TCP",id:"31transfer-over-tcp",level:3},{value:"Parameter Explanation",id:"parameter-explanation-1",level:4},{value:"3.2\u3001Transfer over UDP",id:"32transfer-over-udp",level:3},{value:"4\u3001Image Related",id:"4image-related",level:2},{value:"4.1\u3001PNG to YUV",id:"41png-to-yuv",level:3},{value:"Parameter Explanation",id:"parameter-explanation-2",level:4},{value:"4.2\u3001Open YUV",id:"42open-yuv",level:3},{value:"4.3\u3001YUV to PNG",id:"43yuv-to-png",level:3},{value:"5\u3001Transcoding Related",id:"5transcoding-related",level:2},{value:"5.1\u3001Transcoding RTMP stream to H264 720P",id:"51transcoding-rtmp-stream-to-h264-720p",level:3},{value:"Parameter Explanation",id:"parameter-explanation-3",level:4},{value:"5.2\u3001Transcoding RTMP stream to H265 720P",id:"52transcoding-rtmp-stream-to-h265-720p",level:3}],b={toc:v},N="wrapper";function w(e){var t=e,{components:n}=t,l=g(t,["components"]);return(0,r.yg)(N,f(m(m({},b),l),{components:n,mdxType:"MDXLayout"}),(0,r.yg)("h1",m({},{id:"ffmpeg"}),"FFmpeg"),(0,r.yg)("h2",m({},{id:"1transfer-rtmp-streams"}),"1\u3001Transfer RTMP Streams"),(0,r.yg)("p",null,"Just transfer without transcoding."),(0,r.yg)("h3",m({},{id:"11transfer-flv-file"}),"1.1\u3001Transfer FLV file"),(0,r.yg)("pre",null,(0,r.yg)("code",m({parentName:"pre"},{className:"language-shell"}),"ffmpeg -re -stream_loop -1 -i test.flv -c copy -f flv rtmp://localhost:1935/live/destination\n")),(0,r.yg)("h4",m({},{id:"parameter-explanation"}),"Parameter Explanation"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"-re This parameter is used to simulate real-time reading of the input stream, ensuring that the processing speed of the input data matches the actual playback speed.")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"-stream_loop This option specifies the number of times to loop the input stream. A value of -1 for -stream_loop means infinite looping, so the input stream will continuously replay until manually stopped or the program ends.")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"-c This is a shorthand for -codec, used to specify the encoder or decoder. Using copy indicates that the audio and video data from the source stream will be directly copied without re-encoding. It can also be written as -c:v copy -c:a copy "))),(0,r.yg)("h3",m({},{id:"12transfer-rtmp-stream"}),"1.2\u3001Transfer RTMP stream"),(0,r.yg)("pre",null,(0,r.yg)("code",m({parentName:"pre"},{className:"language-shell"}),"ffmpeg -i rtmp://localhost:1935/live/source -c copy -f flv rtmp://localhost:1935/live/destination\n")),(0,r.yg)("admonition",m({},{type:"note"}),(0,r.yg)("p",{parentName:"admonition"},"If the input stream is already a live stream, the -re parameter can be omitted. When the input stream has a GOP buffer, it will be processed and pushed out quickly. Configuring an appropriate playback strategy can reduce latency more effectively than adding the -re parameter.")),(0,r.yg)("h2",m({},{id:"2record-rtmp-stream"}),"2\u3001Record RTMP stream"),(0,r.yg)("p",null,"You can record the live stream as an FLV file:"),(0,r.yg)("pre",null,(0,r.yg)("code",m({parentName:"pre"},{className:"language-shell"}),"ffmpeg -i  'rtmp://localhost:1935/live/test'  -c:v copy -c:a copy -f flv test.flv\n")),(0,r.yg)("h2",m({},{id:"3transfer-rtsp-stream"}),"3\u3001Transfer RTSP stream"),(0,r.yg)("h3",m({},{id:"31transfer-over-tcp"}),"3.1\u3001Transfer over TCP"),(0,r.yg)("pre",null,(0,r.yg)("code",m({parentName:"pre"},{className:"language-shell"}),'ffmpeg -re -stream_loop -1  -i test.mp4 -c:v copy -c:a copy  -rtsp_transport tcp -f rtsp "rtsp://127.0.0.1:5544/live/test?token=123"\n')),(0,r.yg)("h4",m({},{id:"parameter-explanation-1"}),"Parameter Explanation"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"-rtsp_transport tcp It indicates that audio and video data are transmitted over TCP, which is the Interleaved mode.")),(0,r.yg)("h3",m({},{id:"32transfer-over-udp"}),"3.2\u3001Transfer over UDP"),(0,r.yg)("pre",null,(0,r.yg)("code",m({parentName:"pre"},{className:"language-shell"}),' ffmpeg -re -stream_loop -1  -i test.mp4 -c:v copy  -c:a copy -f rtsp "rtsp://127.0.0.1:5544/live/test?token=123"\n')),(0,r.yg)("h2",m({},{id:"4image-related"}),"4\u3001Image Related"),(0,r.yg)("h3",m({},{id:"41png-to-yuv"}),"4.1\u3001PNG to YUV"),(0,r.yg)("pre",null,(0,r.yg)("code",m({parentName:"pre"},{className:"language-shell"})," ffmpeg -i temp.jpg -s 1024x680 -pix_fmt yuvj420p 9.yuv\n")),(0,r.yg)("h4",m({},{id:"parameter-explanation-2"}),"Parameter Explanation"),(0,r.yg)("p",null,"-s 1024x680: This option specifies the output image size as 1024x680 pixels."),(0,r.yg)("p",null,"-pix_fmt yuvj420p: This option specifies the output pixel format as yuvj420p."),(0,r.yg)("h3",m({},{id:"42open-yuv"}),"4.2\u3001Open YUV"),(0,r.yg)("pre",null,(0,r.yg)("code",m({parentName:"pre"},{className:"language-shell"}),"ffplay -f rawvideo -pixel_format yuv420p -video_size 1024x680 9.yuv\n")),(0,r.yg)("h3",m({},{id:"43yuv-to-png"}),"4.3\u3001YUV to PNG"),(0,r.yg)("pre",null,(0,r.yg)("code",m({parentName:"pre"},{className:"language-shell"}),"ffmpeg -y -s 1024x680 -i 9.yuv output.jpg\n")),(0,r.yg)("h2",m({},{id:"5transcoding-related"}),"5\u3001Transcoding Related"),(0,r.yg)("p",null,"FFmpeg transcoding mainly involves:"),(0,r.yg)("p",null,"Changing the encoding method:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"H.264 to H.265: Reducing bitrate while maintaining the same clarity to lower network bandwidth usage."),(0,r.yg)("li",{parentName:"ul"},"H.265 to H.264: Addressing the issue of low-end devices not being able to decode H.265.")),(0,r.yg)("p",null,"Changing the resolution:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Reducing resolution: Lowering bitrate."),(0,r.yg)("li",{parentName:"ul"},"Increasing resolution: The official FFmpeg's method of increasing resolution and bitrate does not achieve good upscaling results, so it's necessary to integrate third-party SDKs into FFmpeg, such as NVIDIA's MAXINE. ")),(0,r.yg)("p",null,"Reducing bitrate:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Changing from constant bitrate to variable bitrate: Dynamically adjusting the bitrate based on the complexity of the image, saving network bandwidth and enhancing user experience.")),(0,r.yg)("h3",m({},{id:"51transcoding-rtmp-stream-to-h264-720p"}),"5.1\u3001Transcoding RTMP stream to H264 720P"),(0,r.yg)("pre",null,(0,r.yg)("code",m({parentName:"pre"},{className:"language-shell"})," ffmpeg -rw_timeout 5000000 -i 'rtmp://localhost:1935/live/source' -acodec libfdk_aac -b:a 64k -ac 2 -ar 44100 -profile:a aac_he  -vcodec libx264 -b:v 2000k -level 3.1 -vprofile high -vsync 2 -strict -2 -preset medium -bf 3 -force_key_frames source  -f flv -loglevel level+info -vf \"scale='720:-2'\" 'rtmp://localhost:1935/live/dest'\n")),(0,r.yg)("h4",m({},{id:"parameter-explanation-3"}),"Parameter Explanation"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"-rw_timeout 5000000 Sets the read/write timeout to 5000000 microseconds, which equals 5 seconds. If the read/write operation is not completed within this time, FFmpeg will stop the operation and report a timeout error."),(0,r.yg)("li",{parentName:"ul"},"-acodec Executes the audio encoder fdk_aac, which is an open-source encoding library supporting three profile levels: LC, HE-AAC, and HE-AAC-V2."),(0,r.yg)("li",{parentName:"ul"},"-b:a Specifies the audio bitrate."),(0,r.yg)("li",{parentName:"ul"},"-ac Specifies the number of audio channels as 2."),(0,r.yg)("li",{parentName:"ul"},"-ar Specifies the audio sampling rate as 44100."),(0,r.yg)("li",{parentName:"ul"},"-profile:a Specifies the audio profile level as aac_he."),(0,r.yg)("li",{parentName:"ul"},"-vcodec Executes the video encoder x264."),(0,r.yg)("li",{parentName:"ul"},"-b:v Specifies the video bitrate as 1700 Kbits/s."),(0,r.yg)("li",{parentName:"ul"},"-level Used to constrain bitrate, frame rate, and resolution.")),(0,r.yg)("p",null,(0,r.yg)("img",{alt:"H264 Level",src:a(1610).A,width:"829",height:"1209"})),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"-vprofile Used to define a set of encoding tools and features to meet different use cases and performance requirements.")),(0,r.yg)("p",null,(0,r.yg)("img",{alt:"H264 Profile",src:a(9239).A,width:"689",height:"964"})),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"-vsync 2 Frames are either passed through or dropped along with their timestamps to prevent two frames from having the same timestamp.")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"-preset medium Specifies the encoding speed and compression ratio. The faster the encoding speed, the lower the compression ratio. ",(0,r.yg)("a",m({parentName:"p"},{href:"https://trac.ffmpeg.org/wiki/Encode/H.264"}),"FFmpeg doc"))),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"-bf 3 Specifies the number of B-frames as 3, which usually means encoding 3 B-frames between two P-frames.")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"-force_key_frames source Keyframe encoding follows the source stream. If the current frame in the source stream is a keyframe, the encoded output will be a keyframe; if the current frame in the source stream must be discarded, the next frame will be output as a keyframe.")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"-flv Specifies the container format as FLV.")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"-loglevel level+info Adds a log level prefix and sets the log level to info.")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"-vf \"scale='720:-2'\" Video filter parameter. Scale is a filter used for resizing the video; '720:-2' specifies the output video's width and height: 720 indicates the output video width will be set to 720 pixels, and -2 indicates that the height will be automatically calculated to maintain the original aspect ratio."))),(0,r.yg)("h3",m({},{id:"52transcoding-rtmp-stream-to-h265-720p"}),"5.2\u3001Transcoding RTMP stream to H265 720P"),(0,r.yg)("pre",null,(0,r.yg)("code",m({parentName:"pre"},{className:"language-shell"})," ffmpeg -rw_timeout 5000000 -i \"rtmp://localhost:1935/live/source\" -vcodec libx265 -b:v 2000k -acodec libfdk_aac -b:a 64k -ac 2 -ar 44100 -profile:a aac_he -preset veryfast -bf 3 -force_key_frames source -f flv -loglevel level+info -vf scale='720:-2' \u201crtmp://localhost:1935/live/dest\u201d\n")))}w.isMDXComponent=!0},1610:(e,t,a)=>{a.d(t,{A:()=>r});const r=a.p+"assets/images/h264_level-2a1f65e32c7779c25bd74c3bfa5328f4.png"},9239:(e,t,a)=>{a.d(t,{A:()=>r});const r=a.p+"assets/images/h264_profile-8551ca5fb704f301b1aeb353b41af027.png"}}]);